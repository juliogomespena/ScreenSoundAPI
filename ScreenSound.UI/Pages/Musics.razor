@page "/musics"
@inject IMusicService musicService

<MudStack Class="pb-2" Row="true" Justify="Justify.SpaceBetween">
	<MudText Typo="Typo.h3" Class="d-flex justify-start">Musics</MudText>
	<MudPagination Class="custom-pagination d-flex justify-end" Style="list-style:none;" Color="Color.Primary" Count="@totalPages" SelectedChanged="PageChanged" />
</MudStack>
<MudDivider Class="pb-4"/>

@if (paginatedMusics is null)
{
	<MudGrid>
		<MudItem xs="12" Class="pa-10">
			<MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
		</MudItem>
	</MudGrid>
}
else if (paginatedMusics.Count == 0)
{
	<MudText Class="pa-2 Typo="Typo.h6">No musics found.</MudText>
}
else
{
	<MudGrid>
		@foreach (var music in paginatedMusics)
		{
			<MudItem xs="12" sm="6" md="4" lg="3">
				<MusicCard Music="music"/>
			</MudItem>
		}
	</MudGrid>
}

@code
{
	private ICollection<MusicGetModel>? musics;
	private int totalPages;
	private int pageSize = 8;
	private ICollection<MusicGetModel>? paginatedMusics;

	private void PageChanged(int currentPage)
	{
		if (musics is null)
			return;

		paginatedMusics = musics!
			.OrderByDescending(a => a.Id)
			.Skip((currentPage - 1) * pageSize)
			.Take(pageSize)
			.ToList();
	}

	protected override async Task OnInitializedAsync()
	{
		musics = await musicService.ListAllAsync();

		if (musics is not null)
		{
			totalPages = Convert.ToInt32(Math.Ceiling((double)(musics.Count) / pageSize));
			PageChanged(1);
		}
	}
}
