@page "/artists"
@inject IArtistService artistService

<MudStack Class="pb-2" Row="true" Justify="Justify.SpaceBetween">
	<MudText Typo="Typo.h3" Class="d-flex justify-start">Artists</MudText>
	<MudPagination Class="custom-pagination d-flex justify-end" Style="list-style:none;" Color="Color.Primary" Count="@totalPages" SelectedChanged="PageChanged" />
</MudStack>
<MudDivider Class="pb-4"/>

@if (paginatedArtists is null)
{
	<MudGrid>
		<MudItem xs="12" Class="pa-10">
			<MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
		</MudItem>
	</MudGrid>
}
else if (paginatedArtists.Count == 0)
{
	<MudText Class="pa-2 Typo="Typo.h6">No artists found.</MudText>
}
else
{
	<MudGrid>
		@foreach (var artist in paginatedArtists)
		{
			<MudItem xs="12" sm="6" md="4" lg="3">
				<ArtistCard Artist="artist"/>
			</MudItem>
		}
	</MudGrid>
}

@code
{
	private ICollection<ArtistGetModel>? artists;
	private int totalPages;
	private int pageSize = 8;
	private ICollection<ArtistGetModel>? paginatedArtists;

	private void PageChanged(int currentPage)
	{
		if (artists is null)
			return;

		paginatedArtists = artists!
			.OrderByDescending(a => a.Id)
			.Skip((currentPage - 1) * pageSize)
			.Take(pageSize)
			.ToList();
	}

	protected override async Task OnInitializedAsync()
	{
		artists = await artistService.ListAllAsync();

		if (artists is not null)
		{
			totalPages = Convert.ToInt32(Math.Ceiling((double)(artists.Count) / pageSize));
			PageChanged(1);
		}
	}
}
