@using ScreenSound.UI.Helpers
@inject IDialogService Dialog
@inject IMusicService MusicService
@inject IArtistService ArtistService
@inject IGenreService GenreService
@inject NavigationManager NavigationManager

<MudGrid>
	<MudItem xs="12">
		<MudTextField @bind-Value="MusicName" Label="Music name" Typo="Typo.h6" Variant="Variant.Filled" />
	</MudItem>

	<MudItem xs="12">
		<MudTextField @bind-Value="_artistName" Label="Artist name" Typo="Typo.h6" Variant="Variant.Filled" />
	</MudItem>

	<MudItem xs="12">
		<MudTextField @bind-Value="_releaseYear" MaxLength="4" Counter="4" Label="Release year" Typo="Typo.h6" Variant="Variant.Filled" Immediate="true" />
	</MudItem>

	<MudItem xs="12">
		<MudSelect T="string" Label="Genres" @bind-SelectedValues="_selectedGenres" Variant="Variant.Filled" Dense="true" Clearable="true" MultiSelection="true">
			@if (_genres is not null)
			{
				foreach(var genre in _genres)
				{
					<MudSelectItem T="string" Value="@genre" />
				}
			}
		</MudSelect>
	</MudItem>


	<MudItem xs="12">
		<MudGrid Class="d-flex justify-end" Spacing="3">
			@if (_isLoading)
			{
				<MudItem>
					<MudProgressCircular Color="Color.Primary" Indeterminate="true" />
				</MudItem>
			}
			<MudItem>
				<MudButton Variant="Variant.Filled" Style="width: 100px; padding: 10px 20px;" Href="/musics">Back</MudButton>
			</MudItem>

			@if (MusicAction == "Update")
			{
				<MudItem>
					<MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" Style="width: 100px; padding: 10px 20px;" @onclick="DeleteOnClick" Disabled="@_isLoading">Delete</MudButton>
				</MudItem>
			}

			<MudItem>
				<MudButton Variant="Variant.Filled" Color="Color.Primary" Style="width: 100px; padding: 10px 20px;" @onclick="DetermineAction" Disabled="@_isLoading">@MusicAction</MudButton>
			</MudItem>
		</MudGrid>
	</MudItem>
</MudGrid>

@code {
	[Parameter]
	public string? MusicAction { get; set; }
	[Parameter]
	public string? MusicName { get; set; }

	private MusicGetModel? _music;
	private ArtistGetModel? _artist;
	private List<string>? _genres = null;
	private IEnumerable<string>? _selectedGenres;
	private string? _artistName;
	private int? _releaseYear;
	private bool _isLoading = false;

	protected override async Task OnInitializedAsync() 
	{
		_isLoading = true;

		_genres = (await GenreService.ListAllAsync())?
			.Select(g => g.Name).ToList();

		if (!await FieldHelper.EntityFound(_genres, "genres", Dialog))
			NavigationManager.NavigateTo("/musics");

		if (MusicAction == "Update" && !string.IsNullOrWhiteSpace(MusicName))
		{
			_music = await MusicService.FindByName(MusicName);

			if (!await FieldHelper.EntityFound(_music, "music", Dialog))
				NavigationManager.NavigateTo("/musics");

			_artist = await ArtistService.FindByName(_music!.ArtistName);

			if (!await FieldHelper.EntityFound(_artist, "artist", Dialog))
				NavigationManager.NavigateTo("/musics");

			_artistName = _music.ArtistName;
			_releaseYear = _music.ReleaseYear;
			_selectedGenres = _music.Genres;
		}
		_isLoading = false;
	}

	private async Task DetermineAction()
	{
		if (MusicAction == "Add")
			await AddOnClick();
		else if (MusicAction == "Update")
			await UpdateOnClick();

	}

	private async Task AddOnClick()
	{
		_isLoading = true;
		if (string.IsNullOrWhiteSpace(MusicName) || string.IsNullOrWhiteSpace(_artistName) || _releaseYear is null || _selectedGenres is null)
		{
			var parameters = new DialogParameters
			{
				{ "DialogTitle", "Input error" },
				{ "DialogContent", "Please fill in all fields." }
			};

			var options = new DialogOptions
				{
					CloseOnEscapeKey = true,
					MaxWidth = MaxWidth.ExtraSmall
				};

			await Dialog.ShowAsync<SimpleDialog>("Input error", parameters, options);
			_isLoading = false;
			return;
		}

		_artist = await ArtistService.FindByName(_artistName);

		if (!await FieldHelper.EntityFound(_artist, "artist", Dialog))
			NavigationManager.NavigateTo("/musics");

		var music = new MusicPostModel(MusicName, (int)_releaseYear, _artist!.Id, _selectedGenres.ToList());
		await MusicService.Add(music);
		_isLoading = false;
		NavigationManager.NavigateTo("/musics");
	}

	private async Task UpdateOnClick()
	{
		_isLoading = true;
		if (string.IsNullOrWhiteSpace(MusicName) || string.IsNullOrWhiteSpace(_artistName) || _releaseYear is null || _selectedGenres is null)
		{
			var parameters = new DialogParameters
			{
				{ "DialogTitle", "Input error" },
				{ "DialogContent", "Please fill in all fields." }
			};

			var options = new DialogOptions
				{
					CloseOnEscapeKey = true,
					MaxWidth = MaxWidth.ExtraSmall
				};

			await Dialog.ShowAsync<SimpleDialog>("Input error", parameters, options);
			_isLoading = false;
			return;
		}

		_artist = await ArtistService.FindByName(_artistName);

		if (!await FieldHelper.EntityFound(_artist, "artist", Dialog))
			NavigationManager.NavigateTo("/musics");

		var music = new MusicPutModel(_music!.Id, _artist!.Id, MusicName, _releaseYear, _selectedGenres.ToList());
		await MusicService.Update(music);
		_isLoading = false;
		NavigationManager.NavigateTo("/musics");
	}

	private async Task DeleteOnClick()
	{
		_isLoading = true;
		var deleteDialogParameters = new DialogParameters<DeleteDialog>
		{
			{ x => x.ContentText, "Do you really want to delete the selected music? This process cannot be undone." },
			{ x => x.ButtonText, "Delete" },
			{ x => x.Color, Color.Error }
		};

		var deletDialogOptions = new DialogOptions()
			{
				CloseButton = true,
				MaxWidth = MaxWidth.ExtraSmall
			};

		var deleteDialog = await Dialog.ShowAsync<DeleteDialog>("Delete", deleteDialogParameters, deletDialogOptions);
		var result = await deleteDialog.Result;

		if (!result!.Canceled)
		{
			await MusicService.Delete(_music!);
			NavigationManager.NavigateTo("/musics");
		}
		_isLoading = false;
	}
}
